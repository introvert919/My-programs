adjacent_find
	
Описание
Поиск двух соседних элементов, которые либо равны, либо удовлетворяют указанному условию.

Параметры
exec - используемая политика выполнения.
first - тератор вперед в позиции первого элемента в диапазоне для поиска.
last - итератор вперед в позиции, за последней элементом в диапазоне для поиска.
pred - двоичный предикат, задающий условие, которому должны удовлетворять значения соседних элементов в диапазоне, по которому выполняется поиск.

Возвращаемое значение
Переадресный итератор к первому из смежных элементов, равных друг другу (в первой версии) или удовлетворяющий условию, заданному двоичным предикатом (во второй версии), если обнаружена такая пара элементов. В противном случае возвращает итератор, указывающий на last.

Замечания
Алгоритм adjacent_find не изменяет последовательность. Диапазон для поиска должен быть допустимым. Все указатели должны быть разыменовываемыми, а последняя позиция должна быть доступной от первого путем добавочного. Временная сложность алгоритма линейно зависит от количества элементов в диапазоне.
operator==, используемый для определения совпадения между элементами, налагает отношение эквивалентности между своими операндами.

Пример

// alg_adj_fnd.cpp
// compile with: /EHsc
#include <list>
#include <algorithm>
#include <iostream>

// Returns whether second element is twice the first
bool twice (int elem1, int elem2 )
{
    return elem1 * 2 == elem2;
}

int main()
{
    using namespace std;
    list<int> L;
    list<int>::iterator Iter;
    list<int>::iterator result1, result2;

    L.push_back( 50 );
    L.push_back( 40 );
    L.push_back( 10 );
    L.push_back( 20 );
    L.push_back( 20 );

    cout << "L = ( " ;
    for ( Iter = L.begin( ) ; Iter != L.end( ) ; Iter++ )
        cout << *Iter << " ";
    cout << ")" << endl;

    result1 = adjacent_find( L.begin( ), L.end( ) );
    if ( result1 == L.end( ) )
        cout << "There are not two adjacent elements that are equal."
            << endl;
    else
        cout << "There are two adjacent elements that are equal.\n"
            << "They have a value of "
            << *( result1 ) << "." << endl;

    result2 = adjacent_find( L.begin( ), L.end( ), twice );
    if ( result2 == L.end( ) )
        cout << "There are not two adjacent elements where the "
            << "second is twice the first." << endl;
    else
    {
        cout << "There are two adjacent elements where "
            << "the second is twice the first.\n"
            << "They have values of " << *(result2++)
            << " & " << *result2 << "." << endl;
    }
}

Output
L = ( 50 40 10 20 20 )
There are two adjacent elements that are equal.
They have a value of 20.
There are two adjacent elements where the second is twice the first.
They have values of 10 & 20.

Источник: https://learn.microsoft.com/ru-ru/cpp/standard-library/algorithm-functions?view=msvc-170#adjacent_find
