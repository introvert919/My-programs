sort_heap

Описание
Преобразует кучу в упорядоченный диапазон.

Параметры
first
Итератор произвольного доступа, обращающийся к позиции первого элемента в целевой куче.
last
Итератор произвольного доступа, обращающийся к позиции, следующей за последним элементом в целевой куче.
pred
Определяемый пользователем объект функции предиката, задающий условие, когда один элемент меньше другого. Предикат сравнения принимает два аргумента и возвращается true , когда удовлетворено и false когда не удовлетворено.

Замечания
Кучи имеют два следующих свойства.
Первый элемент — всегда наибольший.
Элементы могут добавляться и удаляться в логарифмическое время.
После применения этого алгоритма диапазон, к которому он был применен, больше не является кучей.
sort_heap не является стабильной сортировкой, так как относительный порядок эквивалентных элементов не обязательно сохраняется.
Кучи — это идеальный способ реализации очередей приоритетов, и они используются в реализации класса адаптера контейнера стандартной priority_queue библиотеки C++.
Указанный диапазон должен быть допустимым. Все указатели должны поддерживать удаление ссылок, а последняя позиция в последовательности должна быть доступна из первой позиции за счет увеличения на один.
Сложность в большинстве N log Nслучаев , где N = - lastfirst.

Пример

// alg_sort_heap.cpp
// compile with: /EHsc
#include <algorithm>
#include <functional>
#include <iostream>
#include <ostream>
#include <string>
#include <vector>
using namespace std;

void print(const string& s, const vector<int>& v)
{
    cout << s << ": ( ";

    for (auto i = v.begin(); i != v.end(); ++i)
    {
        cout << *i << " ";
    }

    cout << ")" << endl;
}

int main()
{
    vector<int> v;
    for (int i = 1; i <= 9; ++i)
    {
        v.push_back(i);
    }
    print("Initially", v);

    random_shuffle(v.begin(), v.end());
    print("After random_shuffle", v);

    make_heap(v.begin(), v.end());
    print("     After make_heap", v);

    sort_heap(v.begin(), v.end());
    print("     After sort_heap", v);

    random_shuffle(v.begin(), v.end());
    print("             After random_shuffle", v);

    make_heap(v.begin(), v.end(), greater<int>());
    print("After make_heap with greater<int>", v);

    sort_heap(v.begin(), v.end(), greater<int>());
    print("After sort_heap with greater<int>", v);
}

Output
Initially: ( 1 2 3 4 5 6 7 8 9 )
After random_shuffle: ( 5 4 8 9 1 6 3 2 7 )
     After make_heap: ( 9 7 8 5 1 6 3 2 4 )
     After sort_heap: ( 1 2 3 4 5 6 7 8 9 )
             After random_shuffle: ( 1 3 6 8 9 5 4 2 7 )
After make_heap with greater<int>: ( 1 2 4 3 9 5 6 8 7 )
After sort_heap with greater<int>: ( 9 8 7 6 5 4 3 2 1 )

Источник: https://learn.microsoft.com/ru-ru/cpp/standard-library/algorithm-functions?view=msvc-170#sort_heap
