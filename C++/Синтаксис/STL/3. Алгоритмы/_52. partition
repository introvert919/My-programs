partition

Описание
Классифицирует элементы в диапазоне на два разрозненных набора, с этими элементами, удовлетворяющими унарному предикату, предшествующим тем, которые не удовлетворяют его.

Параметры
exec
Используемая политика выполнения.
first
Двунаправленный итератор адресует позицию первого элемента в разделяемом диапазоне.
last
Двунаправленный итератор, указывающий позицию, следующую за последним элементом в разделяемом диапазоне.
pred
Определенный пользователем объект функции предиката, задающий условие, которое должно удовлетворяться, чтобы элемент был классифицирован. Унарный предикат принимает один аргумент и возвращает true или false.

Возвращаемое значение
Двунаправленный итератор указывает позицию первого элемента в диапазоне, не соответствующего условию предиката.

Замечания
Указанный диапазон должен быть допустимым. Все указатели должны поддерживать удаление ссылок, а последняя позиция в последовательности должна быть доступна из первой позиции за счет увеличения на один.
Элементы a и b эквивалентны, но не обязательно равны, если pred( a, b ) оба имеют значение false и pred( b, a ) имеют значение false, где pred указан предикат, заданный параметром. Алгоритм partition не является стабильным и не гарантирует, что относительный порядок эквивалентных элементов будет сохранен. Алгоритм stable_partition сохраняет этот исходный порядок.
Сложность является линейной: есть (last - first) приложения pred и в большинстве (last - first)/2 случаев переключения.

Пример

// alg_partition.cpp
// compile with: /EHsc
#include <vector>
#include <algorithm>
#include <iostream>

bool greater5 ( int value )
{
    return value > 5;
}

int main()
{
    using namespace std;
    vector<int> v1, v2;
    vector<int>::iterator Iter1, Iter2;

    int i;
    for ( i = 0 ; i <= 10 ; i++ )
    {
        v1.push_back( i );
    }
    random_shuffle( v1.begin( ), v1.end( ) );

    cout << "Vector v1 is ( " ;
    for ( Iter1 = v1.begin( ) ; Iter1 != v1.end( ) ; Iter1++ )
        cout << *Iter1 << " ";
    cout << ")." << endl;

    // Partition the range with predicate greater10
    partition ( v1.begin( ), v1.end( ), greater5 );
    cout << "The partitioned set of elements in v1 is: ( " ;
    for ( Iter1 = v1.begin( ) ; Iter1 != v1.end( ) ; Iter1++ )
        cout << *Iter1 << " ";
    cout << ")." << endl;
}

Output
Vector v1 is ( 4 10 7 8 0 5 2 1 6 9 3 ).
The partitioned set of elements in v1 is: ( 9 10 7 8 6 5 2 1 0 4 3 ).

Источник: https://learn.microsoft.com/ru-ru/cpp/standard-library/algorithm-functions?view=msvc-170#partition
