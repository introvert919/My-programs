Уровень 1
Уровень 1.1
1. Дано число. Проверьте, отрицательное оно или нет. Выведите об этом информацию в консоль.
2. Дана строка. Выведите в консоль длину этой строки.
3. Дана строка. Выведите в консоль последний символ строки.
4. Даны два слова. Проверьте, что первые буквы этих слов совпадают.
5. Дано слово. Получите его последнюю букву. Если слово заканчивается на мягкий знак, то получите предпоследнюю букву.
6. Дано число: int num = 123. Преобразуйте это число в строку: std::string "123".
7. Дано число: int num = 10. Проверьте, что это число находится в диапазоне от 1 до 100.

Уровень 1.2
1. Расскажите, в чем отличие типа int от типа unsigned int.
2. Дано целое число. Выведите в консоль последнюю цифру этого числа.
3. Дано целое число. Выведите в консоль первую цифру этого числа.
4. Дано целое число. Выведите в консоль сумму первой и последней цифры этого числа.
5. Дано целое число. Выведите количество цифр в этом числе.
6. Дано целое число. Проверьте, четное оно или нет.
7. Даны две строки. Проверьте, что первые символы этих строк совпадают.
8. Дано число: int num = 10. Проверьте, что это число двухзначное.

Уровень 1.3
1. Расскажите, в чем отличие типа short от типа int.
2. Выведите в консоль все целые числа от 1 до 100.
3. Дана строка. Если в этой строке более одного символа, выведите в консоль предпоследний символ этой строки.
4. Дано целое число. Проверьте, что первая и последняя цифры этого числа совпадают.
5. Даны два целых числа: int num1 = 36, int num2 = 12. Выведите в консоль большее из этих чисел.
6. Дана строка, содержащая целое число: std::string str = "123". Преобразуйте эту строку в число: unsigned int 123
7. Дано целое число, содержащее номер месяца от 1 до 12: unsigned int num = 1. Определите, в какую пору года попадает этот месяц.

Уровень 1.4
1. Расскажите, в чем отличие типа int от типа float.
2. Выведите в консоль все четные числа из промежутка от 2 до 1000.
3. Дана некоторая строка: std::string str = "abcde". Переберите и выведите в консоль по очереди все ее символы.
4. Даны два целых числа: int num1 = 36, int num2 = 12. Получите остаток деления первого числа на второе.
5. Дано целое число, содержащее номер минуты от 0 до 60: int num = 30. Определите, в какую четверть часа попадает это значение.
6. Дано двухзначное число: int num = 12. Проверьте, что в нем вторая цифра больше первой.

Уровень 1.5
1. Расскажите, сколько байтов занимает число типа int.
2. Выведите в консоль все числа кратные 7 в промежутке от -100 до 100.
3. Даны два целых числа. Проверьте, что первые цифры этих чисел совпадают.
4. Даны два целых числа: int num1 = 36, int num2 = 12. Проверьте, что первое число без остатка делится на второе.
5. Дана некоторая строка: std::string str = "123456789". Переберите и выведите в консоль по очереди все символы с конца строки.
6. Даны три целых числа: int num1 = 36, int num2 = 24, int num2 = 12. Выведите в консоль большее из этих чисел.
7. Даны три символа: char chr1 = 'a', char chr2 = 'b', char chr3 = 'c'. Слейте эти символы в строку:
std::string "abc"
8. Дано целое число, содержащее количество килобайт: int kb = 35. Переведите это значение в байты.
9. Дано целое число, содержащее номер дня от 1 до 31: unsigned int num = 1. Определите, в какую декаду месяца попадает этот день.

Уровень 1.6
1. Расскажите, сколько байтов занимает число типа long.
2. Найдите сумму всех целых чисел от 1 до 100.
3. Даны три символа: char chr1 = '1', char chr2 = '2', char chr3 = '3'. Сложите значения этих символов как целые числа.
4. Дано целое число, содержащее количество мегабайт: int mb = 35. Переведите это значение в байты.
5. Даны два числа: float num1 = 36, float num2 = 12. Узнайте, сколько процентов составляет первое число от второго.

Уровень 1.7
1. Найдите сумму квадратов всех целых нечетных чисел в промежутке от 1 до 100.
2. Напишите код, который выведет первые N степеней двойки.
3. Даны три строки: std::string str1 = "123", std::string str2 = "456", std::string str3 = "789". Сложите значения этих строк как целые числа.
4. Дана некоторая строка: std::string str = "123456789". Найдите сумму цифр из этой строки.
5. Дано дробное число, содержащее количество гигабайт: float gb = 35.24. Переведите это значение в мегабайты, килобайты и байты.

Уровень 1.8
1. Выведите в консоль все целые числа от 100 до 1.
2. Дана некоторая строка: "abcde". Переберите и выведите в консоль по очереди все символы с конца строки.
3. Дано целое число, содержащее количество байт: int b = 7435421243. Переведите это значение в гигабайты, мегабайты и килобайты.
4. Дано некоторое число: 1234567. Найдите сумму цифр этого числа.
5. Дано некоторое число: float num = 12.3. Найдите 10 процентов от этого числа.

Уровень 1.9
1. Найдите сумму квадратов всех целых чисел в промежутке от 1 до 100.
2. Даны два слова. Проверьте, что последняя буква первого слова совпадает с первой буквой второго слова.
3. Определите, сколько секунд содержится в десяти сутках.
4. Выведите в консоль все целые числа от -100 до 100.
5. Даны пять символов:
char chr1 = '1';
char chr2 = '2';
char chr3 = '3';
char chr4 = '4';
char chr5 = '5';
Слейте эти символы в число: int 12345.

Уровень 1.10
1. Найдите сумму всех целых четных чисел в промежутке от 1 до 100.
2. Определите, сколько часов содержится в году.
3. Дано некоторое число: 1234567. Переверните его: 7654321.
4. Дано некоторое целое число: int num = 12. Выведите в консоль все делители этого числа.
5. Дано некоторое число: float num = 1000. Делите его на 2 столько раз, пока результат не будет меньше 10. Сколько итераций для этого потребуется?
6. Дано некоторое число, представляющее собой степень числа 10: int num = 10000. Узнайте, в какую степень возвели десять, чтобы получить заданное число.

Уровень 2
Уровень 2.1
1. Дан массив с целыми числами: int arr[] = {1, 2, 3, 4, 5}. Выведите в консоль количество элементов в этом массиве.
2. Дан массив с целыми числами: int arr[] = {1, 2, 3, 4, 5}. Выведите в консоль элементы этого массива.
3. Дан массив со строками: std::string arr[] = {"123", "456", "789"}. Выведите в консоль первые символы каждого элемента этого массива.
4. Дано некоторое целое число: int num = 12345. Найдите сумму всех его четных цифр.
5. Дано некоторое целое число: unsigned int num = 12. Найдите факториал этого числа.

Уровень 2.2
1. Найдите среднее арифметическое всех целых чисел от 1 до 100.
2. Дан массив с целыми числами: int arr[] = {1, 2, 3, 4, 5}. Выведите в консоль количество байт, занимаемых этим массивом.
3. Дано число: int num = 12345. Найдите сумму первой и последней цифры этого числа.
4. Дан массив с целыми числами: int arr[] = {1, 2, 3, 4, 5}. Найдите сумму элементов этого массива.
5. Дано некоторое целое число: int num = 12345. Выведите в консоль все его цифры с конца.

Уровень 2.3
1. Дан массив с целыми числами: int arr[] = {1, 2, 3, 4, 5}. Найдите сумму квадратов элементов этого массива.
2. Дан массив с целыми числами: int arr[] = {1, 2, 3, 4, 5}. Найдите среднее арифметическое этого массива.
3. Дано некоторое целое число: int num = 12345. Выведите в консоль первые его три цифры.
4. Дан массив: unsigned int arr[10]. С помощью цикла заполните этот массив целыми числами от 1 до 10.

Уровень 2.4
1. Дано некоторое целое число: int num = 12345. Выведите в консоль его последние три цифры.
2. Дан массив с числами: int arr[] = [1, 2, 3, 4, 5]. Найдите сумму квадратных корней элементов этого массива.
3. Дан массив с числами: int[] {1, 2, 3, 4}. Увеличьте каждый элемент этого массива в два раза: int[] {2, 4, 9, 8};
4. Дан массив: unsigned int arr[10]. С помощью цикла заполните этот массив целыми числами от 10 до 1.

Уровень 2.5
1. Дан массив с числами: int arr[] = [1, 2, -3, 4, -5]. Найдите сумму положительных элементов этого массива.
2. Дан массив с числами: int arr[] = {1, 2, 3, 4, 5}. Выведите в консоль элементы этого массива в обратном порядке.
3. Дан массив со строками, содержащими целые числа: std::string arr[] = {"123", "456", "789"}. Преобразуйте этот массив так, чтобы значениями нового массива стали целые числа: int[] {123, 456, 789}.

Уровень 2.6
1. Дан массив с числами: int arr[] = {-1, 2, -3, 4, 5, 11}. Найдите сумму тех элементов этого массива, которые больше нуля и меньше десяти. 
2. Дан массив с целыми числами: int arr[] = {1, 2, 3, 4, 5}. Выведите в консоль элементы этого массива, которые являются четными числами.
3. Дан массив с целыми числами: int arr[] = {1, 2, 3, 0, 4, 5}. Выведите в консоль элементы этого массива до первого нуля.

Уровень 2.7
1. Дан массив с целыми числами: int arr[] = {1, 2, 3, 4, 5}. Найдите сумму квадратов элементов этого массива.
2. Дан массив с числами: int arr[] = {1, 2, 3, 4, 5}. Слейте элементы этого массива в строку: "12345"
3. Дан массив с датой: std::string arr[] = {"2025", "12", "31"}. Из элементов этого массива соберите дату в следующем формате: "31-12-2025".

Уровень 2.8
1. Дан массив со строками: std::string arr[] = {"ab", "cd", "ef"}. Получите массив символов этих строк: char[] {'a', 'b', 'c', 'd', 'e', 'f'}.
2. Дано целое число, содержащее номер месяца от 1 до 12: int num = 1. Выведите название месяца, соответствующее этому числу.
3. Дана строка: std::string str = "12345". Получите первый и последний символ этой строки в следующем виде: std::string "15".
4. Даны переменные, содержащие стороны прямоугольника: int a = 10, int b = 20. Получите площадь и периметр этого прямоугольника.

Уровень 2.9
1. С помощью цикла заполните массив четными числами из промежутка от 1 до 100.
2. Дан массив с целыми числами: int[] {1, 2, 3, 4, 5}. Поменяйте местами первый и второй элементы этого массива: int[] {2, 1, 3, 4, 5}. 
3. Дано целое число, содержащее номер дня недели от 1 до 7: int num = 1. Определите, эта переменная содержит выходной или будний день.
4. Дана переменная, содержащая температуру в градусах Цельсия: short tc = 25. Напишите программу, которая преобразует эту температуру в градусы Фарингейта.

Уровень 2.10
1. Дана переменная, содержащая радиус шара: float r = 10.3. Получите объем и площадь поверхности этого шара.
2. Даны два целых числа: int num1 = 12, int num2 = 16. Выведите в консоль все общие делители этих чисел.
3. Дан массив с целыми числами: int[] {1, 2, 3, 4, 5}. Поменяйте местами первый и последний элементы этого массива: int[] {5, 2, 3, 4, 1}.
4. Дано число из 6-ти цифр: int num = 123321. Проверьте, что сумма первых трех цифр равняется сумме вторых трех цифр.

Уровень 3
Уровень 3.1
1. Дан массив с целыми числами. Выведите в консоль только те числа, которые делятся на 5.
2. Дана строка: "abcdef". Получите первых три символа этой строки: "abc"
3. Дан символ: char chr = 'a'; Узнайте, в каком регистре этот символ: в верхнем или нижнем.
4. Дан массив: int[] [1, 2, 3, 4, 5, 6]. Получите из него следующий срез: int[] [1, 2, 3].
5. Дан массив с целыми числами: int arr[] = {1, 2, 3, 0, 4, 5}. Выведите в консоль позицию первого нуля.

Уровень 3.2
1. Дан массив со строками. Выведите в консоль только те строки, которые начинаются на "http://".
2. Дана некоторая строка: "1203405" Найдите позицию первого нуля в строке.
3. Дана строка: "abcdef". Получите три последних символа этой строки: "def"
4. Дан массив: int[] [1, 2, 3, 4, 5, 6]. Получите из него следующий срез: int[] [3, 4, 5].
5. Дана строка: std::string str = "abc def jhi". Получите массив слов из этой строки: std::string[] {"abc, "def", jhi"}.
6. Дана строка: "abc_abc_abc". Замените все символы подчеркивания на пробелы: "abc abc abc".

Уровень 3.3
1. Дано целое число: int num = 1204. Проверьте, содержит ли это число цифру 0.
2. Дано некоторое слово: "abcba". Проверьте, что это слово читается одинаково с любой стороны.
3. Дан массив: int[] {1, 2, 3, 4, 5, 6}. Получите из него два последних элемента: int[] {5, 6}.
4. Дано целое число: int num = 12345. Проверьте, что в нем каждая цифра на 1 больше предыдущей.
5. Дан массив с дробными числами: float arr[] = {1.11, 2.23, 3.45, 4.66, 5.98}. Округлите элементы этого массива до целой части и запишите в новый массив.
6. Дана строка: "abc_abc_abc_abc_abc_abc". Замените на дефисы первых три символа подчеркивания: "abc-abc-abc-abc_abc_abc".

Уровень 3.4
1. Дан массив с числами: int arr[] = [1, -2, -3, 4, -5, 6]. Подсчитайте количество отрицательных чисел в этом массиве.
2. Дано некоторое целое число: int num = 1357. Проверьте, что все цифры этого числа являются нечетными.
3. Дано некоторое число: int 12345. Получите массив цифр этого числа: int[] {1, 2, 3, 4, 5}.
4. Даны два массива: int arr[]1 = [1, 2, 3], int arr[]2 = [4, 5, 6]. Объедините эти массивы в один: int[] {1, 2, 3, 4, 5, 6}.

Уровень 3.5
1. Дан текст со словами. Запишите в массив все слова, начинающиеся на букву "a".
2. Дан массив со числами. Проверьте, что все элементы этого массива являются положительными числами.
3. Дана некоторая строка: "1203405". Найдите позицию последнего нуля в строке.
4. Даны два массива: int arr[]1 = [1, 2, 3, 4, 5], int arr[]2 = [4, 5, 6, 7, 8]. Выведите в консоль общие элементы этих массивов: 4, 5.
5. Дана строка: std::string str = "abc def jhi". Подсчитайте количество слов в этой строке.
6. Дано некоторое число: int 12000. Подсчитайте количество нулей в конце этого числа: 3.

Уровень 3.6
1. Дан массив с целыми числами. Выведите в консоль числа, состоящие более чем из трех цифр.
2. Дан массив. Выведите в консоль каждый пятый его элемент.
3. Дан массив со строками. Оставьте в этом массиве только те строки, которые заканчиваются на ".html".
4. Дано число, например, вот такое: int num = 12345. Проверьте, что все цифры этого числа больше нуля.
5. Даны три массива: int arr[]1 = [1, 2, 3], int arr[]2 = [4, 5, 6], int arr[]3 = [7, 8, 9]. Объедините эти массивы в один: int[] {1, 2, 3, 4, 5, 6, 7, 8, 9}.
6. Дана некоторая переменная с числом: int num = 5. Сделайте строку, содержащую столько нулей, сколько указано в переменной. В нашем случае получится такая строка: "00000".

Уровень 3.7
1. Дана строка. Сделайте заглавной последнюю букву каждого слова в этой строке.
2. Дана строка. Проверьте, что эта строка состоит только из четных цифр.
3. Дан массив с дробями: float arr[] = [1.456, 2.125, 3.32, 4.1, 5.34]. Округлите эти дроби до одного знака в дробной части.
4. Даны целые числа, разделенные запятыми: std::string str = "12,34,56". Найдите сумму этих чисел.
5. Дано некоторое число, например, такое: int num = 123789. Удалите из этого числа все нечетные цифры. В нашем случае получится такой результат: 28.
6. Дано некоторое число: int 12000. Получите строку, состоящую из нулей из конца этого числа: "000".

Уровень 3.8
1. Дан массив с целыми числами. Проверьте, что все числа из этого массива содержат в себе цифру 3.
2. Дана некоторая строка: "12034050607". Найдите позицию третьего нуля в строке.
3.Через запятую написаны целые числа: std::string str = "1,2,10,100,3". Получите максимальное из этих чисел.
4. Дана строка: std::string str = "abcde". Получите массив символов этой строки: char[] {'a', 'b', 'c', 'd', 'e'}.
5. Дана строка в формате: "kebab-case". Преобразуйте ее в формат: "snake_case".
6. Дана строка в формате: "snake_case". Преобразуйте ее в формат: "camelCase".
7. Дана строка в формате: "camelCase". Преобразуйте ее в формат: "snake_case".

Уровень 3.9
1. Дана некоторая строка, например, вот такая: std::string str = "023m0df0dfg0". Выведите в консоль позиции всех нулей в этой в строке.
2. Дан некоторый массив, например, вот такой: int arr = {1, 2, 3, 4, 5, 6}. Поделите сумму первой половины элементов этого массива на сумму второй половины элементов.
3. Дан массив со строками: std::string arr[] = {"ab", "cd", "ef"}. Получите массив символов этих строк:chars[] {'a', 'b', 'c', 'd', 'e', 'f'}.
4. Даны два массива: int arr[]1 = {1, 2, 3}, int arr[]2 = {4, 5, 6}. Переберите эти массивы одним циклом и в каждой итерации выводите их элементы следующим образом:"1,4", "2,5" ,"3,6".
5. Дана строка: "abc_abc_abc_abc_abc_abc". Замените на дефисы каждый второй символ подчеркивания: "abc-abc_abc-abc_abc-abc".

Уровень 3.10
1. Дано целое число: long num = 10203304506. Выведите в консоль позиции всех цифр 0 в этом числе, за исключением первой и последней.
2. Дан массив с целыми числами: int arr1[] = {123, 334, 456, 556, 789}. Запишите в новый массив числа, состоящие из разных цифр: int arr2[] = {123, 456, 789}.
3. Дано дробное число: float num = 12.34. Запишите целую часть числа в одну переменную, а дробную часть - в другую: int num1 = 12, int num2 = 34.
4. Дано целое число: int num = 12345. Получите массив символов числа: char arr[] = {'1', '2', '3', '4', '5'}.
5. Дана дата в следующем формате: std::string date = "2025-12-31". Преобразуйте ее в следующий формат: std::string date = "31.12.2025".

Уровень 4
Уровень 4.1
1. Дана некоторая строка с буквами и цифрами. Получите позицию первой цифры в этой строке.
2. Напишите программу, которая сформирует следующую строку: "xxxxx".
3. Дан массив: int[] {1, 0, 2, 3, 0, 5}. Удалите из массива все нули и запишите результат в новый массив: int[] {1, 2, 3, 5}.
4. Дан массив: int arr[5]. Напишите код, который заполнит этот массив степенями двойки: {2, 4, 8, 16, 32}.

Уровень 4.2
1. Дана некоторая строка с буквами и цифрами. Получите позицию последней цифры в этой строке. 
2. Выведите в консоль все числа в промежутке от 10 до 1000, у которых первая цифра четная.
3. Дано целое число: int num = 12345. Выведите в консоль количество четных цифр в этом числе.
4. Дано целое число: int num = 12. Выведите в консоль все делители этого числа.
5. Даны два массива: int arr[]1 = [1, 2, 3, 4, 5], int arr[]2 = [1, 2, 3]. Проверьте, что все элементы первого массива есть во втором.
6. Дано целое число: int num = 12345. Поменяйте местами первую и последнюю цифру этого числа: int 52341.

Уровень 4.3
1. Дана некоторая строка с буквами и цифрами. Получите позицию предпоследней цифры в этой строке.
2. Выведите в консоль все числа в промежутке от 10 до 1000, у которых предпоследняя цифра четная.
3. Напишите программу, которая сформирует следующую строку: "123456789"
4. Даны два целых числа: int num1 = 12. int num2 = 16. Выведите в консоль общие делители этих чисел.
5. Дана строка с целыми числами, разделенными пробелами: std::string str = "123 456 789". Найдите сумму чисел из этой строки.
6. Дана строка со словами: std::string str = "word1 word2 word3". Получите первые N слов из этой строки.
7. Дано целое число: int num = 12345. Получите массив символов числа в перевернутом виде: char arr[] = {'5', '4', '3', '2', '1'}.

Уровень 4.4
1. Дана строка. Удалите из нее все гласные буквы.
2. Дано целое число. Проверьте, что у этого числа есть только один делитель, кроме него самого и единицы.
3. Напишите программу, которая сформирует следующую строку: "xxx xxx xxx".
4. Дан массив: int[] [1, 2, 3, 4, 5, 6]. Получите из него каждый второй элемент: int[] [1, 3, 5].
5. Дан массив символов, содержащий цифры: chars[] {'1', '2', '3', '4', '5'}. Слейте элементы этого массива в целое число: int 12345.

Уровень 4.5
1. Выведите в консоль все числа от 1 до 1000, сумма цифр которых равна делится на 3 или на 9.
2. Напишите программу, которая сформирует следующую строку: "xxxxx yyyyy zzzzz".
3. Даны значения в пикселях, содержащие целые числа: std::string size1 = "12px", std::string size2 = "15px". Сложите эти значения так, чтобы результат также был в пикселях: "28px".
4. Дан массив: int[] {1, 2, 3}. Создайте новый массив так, чтобы в нем каждый элемент первого массива повторился два раза: int[] {1, 1, 2, 2, 3, 3}.
5. Дан массив: int arr[] = {1, 2, 3, 4, 5}. Создайте новый массив так, чтобы в новом массиве были все элементы первого массива, за исключением N первых элементов.

Уровень 4.6
1. Дана строка. Проверьте, что эта строка состоит только из цифр.
2. Дано целое число: int num = 12345. Получите первую четную цифру с конца этого числа.
3. Напишите программу, которая сформирует следующую строку: "54321".
4. Дан массив с целыми числами: int arr[] = {123, 102, 345, 350}. Выведите в консоль только те числа, которые содержат цифру ноль.
5. Дана строка: "abcdef". Получите каждый второй символ этой строки: "acf".
6. Дан массив: int arr[] = {1, 2, 3, 0, 4, 0, 5, 0}. Создайте новый массив так, чтобы в новом массиве были все элементы первого массива, за исключением элементов со значением 0.

Уровень 4.7
1. Дан массив с целыми числами: int arr = [123, 456, 789]. Проверьте, что в нем есть число, содержащее в себе цифру 3.
2. Дан массив со строками, содержащими целые числа в виде строк: std::string arr[] = ["1", "2", "3", "4", "5"]. Найдите сумму элементов этого массива.
3. Дана некоторая строка: "AbCdE". Смените регистр букв этой строки на противоположный. В нашем случае должно получится следующее: "aBcDe".
4. Напишите программу, которая сформирует следующую строку: "-1-2-3-4-5-".
5. Дана дата в следующем формате: std::string date = "31-12-2025". Преобразуйте ее в следующий формат: std::string date = "31 декабря 2025".

Уровень 4.8
1. Дана строка с буквами: std::string str = "Aaa Bbb Ccc'. Проверьте, что в этой строке не более двух заглавных букв.
2. Дана дата в следующем формате: std::string str = "2025-12-31'. Преобразуйте эту дату в следующий массив: std::string[] {"31", "12", "2025"}.
3. Дана некоторая строка со словами: "aaa bbb ccc". Сделайте заглавным первый символ каждого слова в этой строке. В нашем случае должно получится следующее: "Aaa Bbb Ccc".
4. Дан массив символов: char arr[] = {'a', 'b', 'c', 'd', 'e', 'f'}. Слейте эти символы попарно в виде строк: std::string[] {"ab", "cd", "ef"}.

Уровень 4.9
1. Дана строка с буквами и цифрами: std::string str = 'a1b2c345'. Проверьте, что в этой строке не более трех букв.
2. Дан массив: int arr[10]. С помощью цикла заполните этот массив случайными целыми числами из промежутка от 1 до 100.
3. Дана некоторая строка: "abcdefg". Удалите из этой строки каждый третий символ. В нашем случае должно получится следующее: "abdeg".
4. Дан массив с номерами дней недели: int arr[] = {1, 2, 7}. Запишите в новый массив названия этих месяцев: std::string[] {"пн", "вт", "вс"}.

Уровень 4.10
1. Дан некоторый массив, например, вот такой: int arr[] = [1, 2, 3, 4, 5, 6]. Поделите сумму элементов, стоящих на четных позициях, на сумму элементов, стоящих на нечетных позициях.
2. Дана некоторая строка: "a bc def ghij". Переведите в верхний регистр все подстроки, в которых количество букв меньше или равно трем. В нашем случае должно получится следующее: "A BC DEF ghij".
3. Дана некоторая строка со словами: "aaa bbb ccc eee fff". Сделайте заглавным первый символ каждого второго слова в этой строке. В нашем случае должно получится следующее: "aaa Bbb ccc Eee fff".

Уровень 5
Уровень 5.1
1. Попросите у пользователя ввести через консоль два числа. Выведите сумму этих чисел.
2. Выведите в консоль все целые двухзначные числа, содержащие одну цифру 2.
3. Дано число: int num = 133. Определите, есть ли среди цифр этого числа одинаковые.
4. Дан массив: int arr[][] = {
	{1, 2, 3},
	{4, 5, 6},
	{7, 8, 9},
};
Выведите в консоль все элементы этого массива.
5. Напишите программу, которая выведет в консоль следующую пирамидку:
x
xx
xxx
xxxx
xxxxx

Уровень 5.2
1. Попросите у пользователя ввести через консоль 10 чисел. Заполните массив этими числами.
2. Дан массив:
int arr[][] = {
	{1, 2, 3},
	{4, 5, 6},
	{7, 8, 9},
};
Найдите сумму элементов этого массива.
3. Дан массив с целыми числами: int arr[] = {100, 200, 300, 400, 500}. Выведите в консоль элементы этого массива, первая цифра которых равна 1 или 2.
4. Дан массив с целыми числами: int arr = [123, 987, 345, 567]. Получите второй элемент, содержащий в себе цифру 3: 345.
5. Напишите программу, которая выведет в консоль следующую пирамидку:
1
22
333
4444
55555
666666
7777777
88888888
999999999

Уровень 5.3
1. Попросите у пользователя ввести через консоль 10 чисел. В ответ выведите сумму этих чисел.
2. Напишите программу, которая выведет в консоль следующую пирамидку:
999999999
88888888
7777777
666666
55555
4444
333
22
1
3. Дан массив:
int arr[][][] = {
	{
		{1, 2, 3, 4, 5},
		{1, 2, 3, 4, 5},
		{1, 2, 3, 4, 5},
	},
	{
		{1, 2, 3, 4, 5},
		{1, 2, 3, 4, 5},
		{1, 2, 3, 4, 5},
	},
	{
		{1, 2, 3, 4, 5},
		{1, 2, 3, 4, 5},
		{1, 2, 3, 4, 5},
	},
};
Выведите в консоль сумму всех элементов этого массива.

Уровень 5.4
1. Дано некоторое целое число: int num = 12345. Проверьте, что цифры этого числа расположены по возрастанию.
2. Дан некоторый массив: int arr[] = {123, 456, 789}. Получите массив первых цифр входящих в первый массив чисел: int[] {1, 4, 7}.
3. Сформируйте с помощью циклов следующий массив: char[] {
	{'x', 'x', 'x'},
	{'x', 'x', 'x'},
	{'x', 'x', 'x'},
}.

Уровень 5.5
1. Попросите у пользователя ввести через консоль целое число из промежутка от 1 до 10. Если будет введено что-то другое, то попросите пользователя ввести число еще раз.
2. Сформируйте с помощью циклов следующий массив:
int[] {
	{1, 2, 3},
	{1, 2, 3},
	{1, 2, 3},
	{1, 2, 3},
	{1, 2, 3},
}
3. Дана некоторая строка: "abcdeabc". Очистите ее от дублей символов: "abcde".
4. Дана некоторая строка: "abcde". Переведите в верхний регистр все нечетные буквы этой строки. В нашем случае должно получится следующее: "AbCdE".

Уровень 5.6
1. Определите, сколько цифр нужно, чтобы записать все целые числа в промежутке от 1 до 100.
2. Напишите программу, которая будет находить корни квадратного уравнения. Для этого спросите у пользователя три числа, которые будут коэффициентами уравнения.
3. Сформируйте с помощью циклов следующий массив:
int[] {
	{1, 2, 3},
	{4, 5, 6},
	{7, 8, 9},
}
4. Даны два числа: int num1 = 12345, int num2 = 45678. Выведите в консоль цифры, которые есть и в одном, и в другом числе.

Уровень 5.7
1. Выведите в консоль все числа в промежутке от 10 до 1000, сумма первой и второй цифры которых равна пяти.
2. Дан массив:
{
	{1, 2, 3},
	{4, 5, 6},
	{7, 8, 9},
}
Слейте элементы этого массива в один одномерный массив: {1, 2, 3, 4, 5, 6, 7, 8, 9}.
3. Даны две строки: std::string str1 = "12345", std::string str2 = "45678". Получите символы, которые есть и в одной, и в другой строке: "45".

Уровень 5.8
1. Дан массив:
{
	{2, 1, 4, 3, 5},
	{3, 5, 2, 4, 1},
	{4, 3, 1, 5, 2},
}
Отсортируйте элементы в каждом подмассиве.
2. Дан некоторый массив с числами, например, вот такой: int arr[] = [1, 2, 3, 4, 5, 6]; Слейте пары элементов вместе: int[] [12, 34, 56].
3. Выведите на экран следующую пирамидку:
111
222
333
444
555
666
777
888
999

Уровень 5.9
1. Выведите на экран следующую пирамидку:
xx
xxxx
xxxxxx
xxxxxxxx
xxxxxxxxxx
2. Сделайте массив размером 10 на 10. Заполните его числами по порядку:
{
	{ 1,  2,  3,  4,  5},
	{ 6,  7,  8,  9, 10},
	{11, 12, 13, 14, 15},
	{16, 17, 18, 19, 20},
	{21, 22, 23, 24, 25},
}
3. Дано число: int num = 12345. Удвойте цифры в этом числе: 1122334455.
4. Дан массив:
{
	"123",
	"213",
	"321",
}
Замените в каждой строке символы "1" на "0":
{
	"023",
	"203",
	"320",
}

Уровень 5.10
1. Выведите в консоль следующую пирамидку:
1
333
55555
7777777
999999999
2. Спросите у пользователя число. Выведите в консоль таблицу умножения на это число. Ниже приведен пример для двойки:
1 * 2 = 2
2 * 2 = 3
3 * 2 = 6
4 * 2 = 8
5 * 2 = 10
6 * 2 = 12
7 * 2 = 14
8 * 2 = 16
9 * 2 = 18
3. Дан массив с некоторыми целыми числами, например, вот такой: int arr[] = {123, 456, 789}. Напишите код, который перевернет числа в этом массиве по следующему принципу: {321, 654, 987}.
4. Дан массив с некоторыми целыми числами, например, вот такой: int arr[] = {123, 333, 133}. Замените в каждом числе все тройки на нули, за исключением троек, стоящих в начале числа {120, 300, 100}.

Уровень 6
Уровень 6.1
1. Выведите текущую дату в формате год-месяц-день.
2. Выведите название текущего дня недели.
3. Попросите пользователя ввести число через консоль. В результате выведите квадратный корень этого числа.
4. Дана некоторая строка со словами: "aaa bbb ccc eee fff". Удалите из этой строки каждое второе слово. В нашем случае должно получится следующее: "aaa ccc fff".

Уровень 6.2
1. Выведите название завтрашнего дня недели.
2. Попросите пользователя ввести дату в формате год-месяц-день. Проверьте, ввел ли он корректное значение.
3. Попросите пользователя ввести целое число через консоль. Проверьте, ввел ли он корректное значение.
4. Напишите программу, которая сформирует следующую строку: "12345 54321".
5. Дан некоторый массив, например, вот такой: {1, 2, 3, 4, 5, 6}.
По очереди выведите в консоль подмассивы из двух элементов нашего массива:
{1, 2}
{3, 4}
{5, 6}.

Уровень 6.3
1. Попросите пользователя ввести два числа целых числа через консоль. Заполните массив целыми числами от минимального введенного числа до максимального.
2. Попросите пользователя ввести дату в формате год-месяц-день. Определите день недели, соответствующий этой дате.
3. Попросите пользователя ввести год. Определите, високосный этот год или нет.
4. Дан некоторый массив, например, вот такой: {1, 2, 3, 4, 5, 6}. Поменяйте местами пары элементов этого массива: {2, 1, 4, 3, 6, 5}.

Уровень 6.4
1. Попросите пользователя ввести целое число через консоль. Получите факториал введенного числа.
2. Попросите пользователя ввести дату в формате год-месяц-день. Проверьте, ввел ли он значение в корректном формате.
3. Определите, сколько дней осталось до Нового Года.
4. Дана строка, содержащая время в формате часы: минуты: секунды: "12:59:59". Проверьте, что время корректно: часы от 00 до 23, минуты и секунды от 00 до 59.
5. Дана некоторая строка: "1 22 333 4444 22 5555 1". Удалите из этой строки все подстроки, в которых количество символов больше трех. В нашем случае должно получится следующее: "1 22 333 22 1".

Уровень 6.5
1. Попросите пользователя ввести дату рождения в формате год-месяц-день. Определите, сколько полных лет пользователю.
2. Попросите пользователя ввести три числа. Проверьте, что эти числа являются тройкой Пифагора: квадрат самого большого числа должен быть равен сумме квадратов двух остальных.
3. Дана дата: std::string date = "2020-11-32". Проверьте, корректна ли эта дата.
4. Дано некоторое целое число: 35142. Отсортируйте цифры этого числа. В нашем случае должно получится следующее: 12345.

Уровни 6.6
1. Определите, сколько дней осталось до конца месяца.
2. Попросите пользователя ввести свой email. Проверьте, ввел ли он корректное значение.
3. Попросите пользователя ввести дату в формате год-месяц-день. Определите, была уже дата в текущем году.
4. Спросите у пользователя дату рождения. Определите, сколько дней осталось до его ближайшего Дня Рождения.
5. Дан некоторый массив, например, вот такой: int[] {123, 456, 789}. Слейте все элементы этого массива в один массив, разбив их посимвольно: int {1, 2, 3, 4, 5, 6, 7, 8, 9}.

Уровень 6.7 
1. Попросите пользователя ввести свой номер телефона. Проверьте, ввел ли он корректное значение.
2. Выведите в консоль даты всех выходных дней текущего года в формате год-месяц-день.
3. Дано некоторое число: 123456. Найдите сумму пар цифр этого числа. В нашем случае имеется ввиду следующее: 12 + 34 + 56.

Уровень 6.8
1. Определите, сегодня выходной день или будний. Результат выведите в консоль.
2. Попросите пользователя ввести год. Выведите в консоль даты всех пятниц 13-е в введенном году.
3. Дана строка со словами. Отсортируйте слова в алфавитном порядке.
4. Дана строка с датой: "2025-2-1". Напишите код, который при необходимости добавит нули к месяцу и дню: "2025-02-01".
5. Напишите программу, которая сформирует следующую строку: "-1-22-333-444-55555-".

Уровень 6.9
1. Определите, сколько дней осталось до ближайшего воскресенья. Результат выведите в консоль.
2. Выведите в консоль название дня недели последнего дня текущего месяца.
3. Напишите код, который сравнит две приведенные ниже даты и выведет сообщение о том, какая из них больше: std::string date1 = "2020-11-30", std::string date2 = "2020-12-31".
4. Дана некоторая строка с числом: "1234567". Отделите тройки цифр пробелами, начиная с конца числа. В нашем случае должно получится следующее: "1 234 567".

Уровень 6.10
1. Попросите пользователя ввести две даты в формате год-месяц-день. Определите, сколько дней между введенными датами.
2. Заполните массив случайными числами из промежутка от 1 до 100.
3. Выведите все даты текущего месяца в консоль в формате год-месяц-день. Отметьте будни и выходные, а также текущий день.
4. Напишите программу, которая сформирует следующую строку: "12 34 56 78".
5. Напишите программу, которая сформирует следующую строку: "1+2-3+4-5+6-7+8".
6. Дан массив с числами: {1, 2, 3, 3, 4, 5}. Проверьте, что в этом массиве есть два одинаковых элемента подряд.

Уровень 7
Уровень 7.1
1. Сделайте функцию, которая вернет текущий день недели словом.
2. Сделайте функцию, которая параметром будет получать дату, а возвращать день недели словом, соответствующий этой дате.
3. Сделайте функцию, которая параметром будет принимать секунды, а возвращать количество суток, соответствующих этим секундам.
4. Сделайте функцию, которая параметром будет принимать число и строку и обрезать эту строку до длины, заданной первым параметром.
5. Сделайте функцию, которая параметром будет получать дату, а возвращать знак зодиака, соответствующий этой дате.
6. Сделайте функцию, которая параметром будет принимать число, а возвращать сумму его делителей.

Уровень 7.2
1. Сделайте функцию, которая параметром будет принимать число и удалять из него нули.
2. Сделайте функцию, которая будет возвращать сколько дней прошло или осталось до заданной даты в году, в зависимости от того, была уже эта дата или нет.
3. Сделайте функцию, которая параметром будет год и проверять, високосный он или нет.
4. Сделайте функцию, которая будет возвращать сколько дней осталось до конца текущего месяца.
5. Сделайте функцию, которая вернет предыдущий, текущий и следующий дни недели словом в виде следующего массива: {"пн", "вс", "сб"}.

Уровень 7.3
1. Сделайте функцию, которая параметром будет принимать массив и возвращать новый массив, не содержащий дубли элементов.
2. Сделайте функцию, которая параметром будет принимать массив и возвращать новый массив, не содержащий одинаковые, рядом стоящие элементы.
3. Сделайте функцию, которая первым параметром будет принимать целое число и возвращать количество его цифр, заданное вторым параметром.
4. Сделайте функцию, которая параметром будет принимать число и проверять, простое оно или нет.
5. Сделайте функцию, которая параметром будет принимать массив с числами и возвращать максимальное и минимальное значение из этого массива в виде следующего массива: [9, 1].

Уровень 7.4
1. Сделайте функцию, которая параметром будет принимать число, а возвращать количество его делителей.
2. Сделайте функцию, которая параметром будет принимать дату, а возвращать знак зодиака, соответствующий этой дате.
3. Сделайте функцию, которая параметром будет принимать число и удалять из него четные цифры.
4. Сделайте функцию, которая заполнит массив N случайными числами из заданного промежутка.

Уровень 7.5
1. Дана переменная со строкой. Проверьте, что в эта строка представляет собой число, то есть состоит только из цифр.
2. Дана переменная со строкой. Проверьте, что в эта строка представляет собой дробь.
3. Сделайте функцию, которая параметром будет принимать массив с числами и возвращать второе по величине число.
4. Сделайте функцию, которая параметрами будет принимать два числа и возвращать массив, заполненный целыми числами от минимального параметра до максимального.
5. Сделайте функцию, которая заполнит массив случайными латинскими буквами.
6. Сделайте функцию, которая будет возвращать сумму N первых чисел Фибоначчи.

Уровень 7.6
1. Сделайте функцию, которая параметром будет принимать дату в формате год-месяц-день, и определять, существует ли такая дата или нет.
2. Сделайте функцию, которая параметром будет принимать секунды, а возвращать количество суток, соответствующих этим секундам.
3. Сделайте функцию, которая сгенерирует строку заданной длины, заполненную случайными латинскими буквами.
4. Сделайте функцию, которая параметром будет получать строку со словами, а возвращать строку в верхнем регистре, состоящую из первых букв слов.
5. Сделайте функцию, которая параметром будет принимать массив с числами и заменять каждое число на массив его делителей.

Уровень 7.7
1. Сделайте функцию, которая параметром будет принимать текст со словами, а возвращать текст, в котором эти слова будут отсортированы в алфавитном порядке.
2. Сделайте функцию, которая параметром будет принимать два массива и возвращать массив их общих элементов.
3. Сделайте функцию, которая будет возвращать случайное число. Метод не должен возвращать одно и тоже число два раза подряд.
4. Сделайте функцию, которая параметром будет принимать массив и возвращать новый массив, в котором будут удалены все дубли, которые встречаются больше трех раз.

Уровень 7.8
1. Сделайте функцию, которая параметром будет принимать массив и возвращать случайный элемент этого массива.
2. Сделайте функцию, которая параметром будет принимать массив и возвращать массив из N случайных элементов этого массива.
3. Сделайте функцию, которая параметром будет принимать массив и возвращать случайный элемент этого массива так, чтобы одинаковые элементы не возвращались два раза подряд.
4. Сделайте функцию, которая будет возвращать массив простых чисел из заданного промежутка.
5. Сделайте функцию, которая параметрами будет принимать любое количество чисел, а возвращать их сумму.
6. Сделайте функцию, которая заполнит массив N случайными числами из заданного промежутка так, чтобы в массиве не было подряд двух одинаковых чисел.
7. Сделайте функцию, которая заполнит массив N случайными числами из заданного промежутка так, чтобы числа не повторялись.

Уровень 7.9
1. Сделайте функцию, которая будет возвращать сколько дней осталось до ближайшего 29 февраля.

2. Сделайте функцию, которая будет возвращать дату следующей масленницы, которая празднуется в последнее воскресенье зимы.
3. Сделайте функцию, которая будет возвращать случайный цвет.
4. Сделайте функцию, которая параметром будет принимать массив чисел и возвращать массив общих делителей всех чисел из переданного массива.
5. Сделайте функцию, которая параметром будет принимать двухмерный массив чисел и возвращать массив максимальных чисел в каждом подмассиве.

Уровень 7.10
1. Сделайте функцию, которая параметром будет принимать букву и проверять, это буква кириллицы или латиницы.
2. Сделайте функцию, которая параметром будет принимать букву и проверять, это буква в верхнем регистре или в нижнем.
3. Сделайте функцию, которая параметром будет принимать массив и перемешивать элементы этого массива в случайном порядке.
4. Сделайте функцию, которая параметром будет принимать строку из слов, а возвращать строку, состоящую из первых букв этих слов, переведенных в верхний регистр.

Уровень 8
Уровень 8.1
1. Дан текстовый файл. Получите количество символов в нем.
2. Попросите пользователя ввести текст через консоль. Запишите введенный текст в какой-нибудь файл.
3. Дан текстовый файл со словами. Напишите программу, которая обернет каждое слово в круглые скобки. Результат запишите в новый файл.
4. Дан текстовый файл со словами и с дробями вида 1/2. Напишите программу, которая обернет каждую дробь в круглые скобки. Результат запишите в новый файл.
5. Напишите программу, которая сформирует следующий массив:
{
	{
		{1, 2, 3},
		{1, 2, 3},
		{1, 2, 3},
	},
	{
		{1, 2, 3},
		{1, 2, 3},
		{1, 2, 3},
	},
	{
		{1, 2, 3},
		{1, 2, 3},
		{1, 2, 3},
	},
}.

Уровень 8.2
1. Дан текстовый файл. Получите количество букв в нем (т.е. без пробелов, знаков препинаний и т.п.).
2. Создайте текстовый файл, именем которого будет текущая дата в формате год-месяц-день.
3. В файле через запятую написаны числа. Получите максимальное из этих чисел.
4. Дан текстовый файл. Получите массив всех его строк.

Уровень 8.3
1. Дан текстовый файл. В нем записан текст и встречаются числа. Возведите каждое из этих чисел в квадрат и запишите результат обратно в этот же файл.
2. Дана папка с файлами. Удалите из этой папки все файлы с заданным расширением.
3. Дан массив. Запишите элементы этого массива в файл так, чтобы каждый элемент был написан с новой строки.
4. Сделайте функцию, которая будет возвращать массив, заполненный N случайными числами из заданного диапазона так, чтобы числа не повторялись.

Уровень 8.4
1. Дан текстовый файл. Запишите в конец его текста текущий момент времени с новой строки.
2. Дана папка с файлами. Получите имена всех картинок из этой папки.
3. Дан текстовый файл. Через консоль у пользователя спрашивается слово. Проверьте, есть ли данное слово в файле.
4. В папке лежат текстовые файлы. Получите первые N строк текста из каждого файла и запишите результат в новый файл, разделив полученные тексты пустыми строками.
5. Дана папка с файлами. Напишите программу, которая сделает пустыми все текстовые файлы из этой папки.
6. Дан массив, содержащий имена файлов. Напишите программу, которая создаст в заданной папке все файлы из массива.
7. Спросите у пользователя число из четного количества цифр. Проверьте, что число представляет собой счастливый билет, то есть сумма половины цифр равна сумме второй половине цифр.

Уровень 8.5
1. Дан текстовый файл. Запишите в начало его текста текущий момент времени с новой строки.
2. Дана папка с файлами. Получите массив размеров всех файлов из этой папки.
3. Дан массив имен папок. Напишите программу, которая создаст в заданной папке подпапки с именами из массива.
4. В файле расположен русский текст. Откройте этот файл, преобразуйте текст в транслит и запишите в новый файл.

Уровень 8.6
1. Дан текстовый файл. Получите процентное содержание каждого символа. Результат запишите в новый файл.
2. Дан текстовый файл. Получите первую строку из этого файла.
3. Дан текстовый файл. Перемешайте в этом файле строки в случайном порядке.
4. Получите список всех возможных счастливых билетов. Билет представляет собой строку из шести цифр, может быть с нулями спереди. Билет считается счастливым, если сумма сумма первых трех цифр равна сумме вторых трех цифр. Запишите полученный список в файл, каждый билет с новой строчки.
5. Напишите программу, которая сформирует следующий массив:
{
	"x",
	"xx",
	"xxx",
	"xxxx",
	"xxxxx",
}.

Уровень 8.7
1. Дана папка с файлами и подпапками. Получите массив имен подпапок из этой папки.
2. Дана папка с файлами и подпапками. Получите имена всех файлов из папок и подпапок.
3. Дан текстовый файл. Получите вторую строку из этого файла.
4. Дан массив с числами. Подсчитайте общее количество цифр 3 во всех числах данного массива.
5. Напишите программу, которая сформирует следующий массив:
{
	"1",
	"12",
	"123",
	"1234",
	"12345",
}.

Уровень 8.8
1. Дан текстовый файл. Перемешайте в этом файле слова в случайном порядке.
2. Дан текстовый файл. Получите все уникальные слова из этого файла. Результат запишите в новый файл, так, чтобы в каждом ряду стояло по 10 слов, разделенных пробелами.
3. Дан массив с числами. Подсчитайте общее количество цифр во всех числах данного массива.
4. Напишите программу, которая сформирует следующий массив:
{
	"1",
	"12",
	"123",
	"1234",
	"12345",
	"1234",
	"123",
	"12",
	"1",
}.

Уровень 8.9
1. Дан текстовый файл. Получите количество пустых строк из этого файла.
2. Дан текстовый файл. Проверьте, что в этом файле первое слово каждого предложения начинается с большой буквы.
3. Напишите функцию, которая параметром будет принимать путь к папке, а возвращать количество файлов из этой папки и ее подпапок.
4. Дана папка с файлами и подпапками. Найдите все картинки и переместите их в новую папку. Сделайте так, чтобы все картинки имели уникальные имена.
5. Дан текстовый файл. В нем написан текст, разбитый на предложения. Перемешайте слова в каждом предложении текста и запишите полученный текст в новый файл.
6. Напишите программу, которая сформирует следующую строку: "-1-12-23-34-45-".
7. Напишите программу, которая сформирует следующий массив:
{
	12,
	34,
	56,
	78,
	90,
}.

Уровень 8.10
1. Дан текстовый файл. Проверьте, что в этом файле в начале одна пустая строка, а в конце - две пустых строки.
2. Напишите функцию, которая параметром будет принимать путь к папке, а возвращать размер этой папки.
3. Дана папка с файлами и подпапками. Получите пути ко всем файлам из папки и подпапок. Результат запишите в новый файл, каждый путь с новой строки.
4. Дан текстовый файл. В нем написан текст, разбитый на предложения. Перемешайте слова в каждом предложении текста и запишите полученный текст в новый файл.
5. Сделайте функцию, которая будет удалять папку вместе со всем ее содержимым.
6. Дана папка с файлами и подпапками. Сделайте копию этой папки. 
7. Запишите в файл все високосные года за предыдущие сто лет.

Уровень 9
Уровень 9.1
1. Дано целое число: int num = 12345. Найдите наименьшую и наибольшую цифру в этом числе.
2. Дан некоторый URL: std::string url = "http://test.com/dir1/dir2/dir3/page.html". Получите из него имя домена: "test.com".
3. Дан массив:
{
	{2, 4, 5},
	{1, 2, 3},
	{0, 1, 1},
	{5, 7, 1},
}
Отсортируйте элементы массива по возрастанию суммы элементов подмассива.

Уровень 9.2
1. Напишите программу, которая сформирует следующую строку: "-x-xx-xxx-xx-x-".
2. Даны два массива: int arr[]1 = {1, 2, 3, 4}, int arr[]2 = {5, 6, 7, 8}. Слейте их элементы попарно в следующий двухмерный массив:
int[][] {
	{1, 5},
	{2, 6},
	{3, 7},
	{4, 8}
}.
3. Дан некоторый URL: std::string url = "http://test.com/dir1/dir2/dir3/page.html". Получите из него имя страницы: "page.html".
4. Дан массив, подмассивы которого содержат цифры:
[
	[1, 2, 3],
	[4, 5, 6],
	[7, 8, 9],
]
Слейте элементы этого массива в числа: [123, 456, 789].

Уровень 9.3
1. Спросите у пользователя два целых числа. Создайте двухмерный массив, размер которого будет взят из введенных пользователем чисел. Заполните массив случайными целыми числами.
2. Дан следующий массив: std::string arr[] = ["123", "456", "789"]. Преобразуйте этот массив в следующий:
int arr[] = {
	{1, 2, 3},
	{4, 5, 6},
	{7, 8, 9}
};
3. Дан некоторый URL: std::string url = "http://test.com/dir1/dir2/dir3/page.html". Получите из него протокол: "http".
4. Дан двухмерный массив:
int[][] arr = {
	{1, 5},
	{2, 6},
	{3, 7},
	{4, 8}
}.
Разделите его элементы на два массива: int[] {1, 2, 3, 4}, int[] {5, 6, 7, 8}.

Уровень 9.4
1. Дан файл. Прочитайте его текст и найдите самое часто встречающееся слово в этом тексте.
2. Дан некоторый массив: int arr[] = {1, 2, 3, 4, 5, 6, 7}. Найдите элемент массива, чье значение наиболее близко к среднему арифметическому массива.
3. Дана некоторая строка: std::string txt = "abcde abcde". В переменной хранятся символы: std::string del = "abe". Удалите из строки все указанные в переменной символы. В нашем случае должно получится следующее: "cd cd".

Уровень 9.5
1. Дана строка со словами. Найдите самое длинное слово из этой строки.
2. Пусть у нас есть дата 22.02.2017. В этой дате 4 двойки. Найдите все даты с 4-мя двойками в текущем столетии.
3. Определите, сколько пятниц 13-е в текущем году.
4. Дан текстовый файл. Получите строку, состоящую из первых букв каждой строки файла. Найденную строку запишите в новый файл.
5. Напишите программу, которая сформирует следующую строку: "11 12 13 21 22 23 31 32 33".

Уровень 9.6
1. Дан некоторый URL: std::string url = "http://test.com/dir1/dir2/dir3/page.html". Получите имя первой папки: "dir1".
2. Сделайте функцию, которая будет принимать число, а возвращать это число прописью. Пусть функция работает с числами до 999. Смотрите пример: func(123); // выведет 'сто двадцать три'.
3. Дана строка, содержащая два числа и математическую операцию между ними: '10 + 20'. Напишите код, который вычислит результат записанной математической операции.

Уровень 9.7
1. Дано слово. Перемешайте буквы этого слова в случайном порядке.
2. Спросите у пользователя число. Получите все возможные варианты разложения этого числа на два множителя.
3. Дана строка, содержащая две дроби и математическую операцию между ними: '2/3 + ¾'. Напишите код, который вычислит результат записанной математической операции.

Уровень 9.8
1. Сделайте программу, генерирующую квадратные уравнения с целыми корнями.
2. Реализуйте алгоритм сортировки методом пузырька.
3. Дано число. Проверьте, является ли это число совершенным.
4. Дан файл с текстом. Получите процентное содержание каждого символа текста и запишите результат в файл так, чтобы на каждой строке был записан символ и его процент.

Уровень 9.9
1. Рассмотрите промежуток от 2000 года до текущего года. Определите, сколько раз 1 января в этом промежутке попадало на выходной день, то есть на субботу или на воскресенье.
2. Дан текст. Напишите программу, которая отформатирует этот текст так, чтобы в строке текста было не более 70 символов, а потом шел перенос строки. Слова при этом не должны разбиваться.

Уровень 9.10
1. Спросите у пользователя два числа. Проверьте, являются ли эти числа дружественными или нет.
2. Дан некоторый массив: int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}. Дана переменная: int n = 3. Превратите этот массив в двухмерный, по n элементов в подмассиве.

Уровень 10
Уровень 10.1
1. Даны два числа. Выведите на экран процесс нахождения НОК, как в школе.
2. Дан произвольный двухмерный массив:
{
	{11, 12, 13, 14, 15},
	{21, 22, 23, 24, 25},
	{31, 32, 33, 34, 35},
	{41, 42, 43, 44, 45},
	{51, 52, 53, 54, 55},
}
Получите массив элементов его главной диагонали:
{
	11, 22, 33, 44, 55
}.

Уровень 10.2
1. Даны два числа. Выведите на экран процесс нахождения НОД, как в школе.
2. Два числа делятся друг на друга, в результате получается периодическая дробь. Напишите код, который определит период этой дроби.
3. Спросите у пользователя целое число. В ответ выведите разложение этого числа на простые множители.
4. Спросите у пользователя два целых числа. В ответ выведите массив всех простых чисел из промежутка, заданном введенными значениями.

Уровень 10.3
1. Дан массив из шести цифр. Проверьте, можно ли собрать из этих цифр счастливый билет.
2. Дан массив со словами. Получите из этого массива случайное слово, начинающееся на заданную букву.
3. Сделайте функцию, которая параметром будет принимать английское существительное в единственном числе и возвращать его во множественном числе.
4. Выведите в консоль все пары дружественных чисел из заданного промежутка.

Уровень 10.4
1. Дан некоторый URL: std::string url = "http://test.com/dir1/dir2/dir3/page.html". Получите из него последовательный набор папок:
{
	"/dir1/dir2/dir3/",
	"/dir2/dir3/",
	"/dir3/"
}
2. Дан произвольный двухмерный массив:
{
	{11, 12, 13, 14, 15},
	{21, 22, 23, 24, 25},
	{31, 32, 33, 34, 35},
	{41, 42, 43, 44, 45},
	{51, 52, 53, 54, 55},
}
Получите массив элементов его побочной диагонали:
{
	15, 24, 33, 42, 51
}.

Уровень 10.5
1. Дано число. Выведите на экран процесс разложения числа на простые множители, как в школе.
2. Дан произвольный двухмерный массив:
{
	{11, 12, 13, 14, 15},
	{21, 22, 23, 24, 25},
	{31, 32, 33, 34, 35},
	{41, 42, 43, 44, 45},
	{51, 52, 53, 54, 55},
}
Обнулите элементы его главной диагонали:
{
	{ 0, 12, 13, 14, 15},
	{21,  0, 23, 24, 25},
	{31, 32,  0, 34, 35},
	{41, 42, 43,  0, 45},
	{51, 52, 53, 54,  0},
}
3. Сделайте функцию, которая будет устанавливать правильную форму существительного после числа. Вот как должна работать эта функция:

func(1, "яблоко", "яблока", "яблок"); // выведет "1 яблоко"
func(2, "яблоко", "яблока", "яблок"); // выведет "2 яблока"
func(3, "яблоко", "яблока", "яблок"); // выведет "3 яблока"
func(4, "яблоко", "яблока", "яблок"); // выведет "4 яблока"
func(5, "яблоко", "яблока", "яблок"); // выведет "5 яблок"
Вот пример для для двухзначных чисел:
func(11, "яблоко", "яблока", "яблок"); // выведет "11 яблок"
func(12, "яблоко", "яблока", "яблок"); // выведет "12 яблок"
func(21, "яблоко", "яблока", "яблок"); // выведет "21 яблоко"
func(23, "яблоко", "яблока", "яблок"); // выведет "23 яблока"

Наш метод должен работать для чисел любой длины:
func(1223421, "яблоко", "яблока", "яблок"); // выведет "1223421 яблоко".

Уровень 10.6
1. Через консоль спросите у пользователя длинное слово. Выведите список слов, которые можно составить из букв введенного слова.
2. Дан произвольный двухмерный массив:
{
	{11, 12, 13, 14, 15},
	{21, 22, 23, 24, 25},
	{31, 32, 33, 34, 35},
	{41, 42, 43, 44, 45},
	{51, 52, 53, 54, 55},
}
Обнулите элементы, находящиеся ниже главной диагонали:
{
	{11, 12, 13, 14, 15},
	{ 0, 22, 23, 24, 25},
	{ 0,  0, 33, 34, 35},
	{ 0,  0,  0, 44, 45},
	{ 0,  0,  0,  0, 55},
}
3. Дан некоторый URL: std::string url = "http://test.com/dir1/dir2/dir3/page.html". Даны переменные: int num = 2, std::string val = "eee". Замените в URL папку с номером num на значение val: "http://test.com/dir1/eee/dir3/page.html".

Уровень 10.7
1. Даны два числа. Выведите на экран процесс деления этих чисел в столбик, как в школе.
2. Дан произвольный двухмерный массив:
{
	{11, 12, 13, 14, 15},
	{21, 22, 23, 24, 25},
	{31, 32, 33, 34, 35},
	{41, 42, 43, 44, 45},
	{51, 52, 53, 54, 55},
}
Обнулите элементы, находящиеся не на диагоналях:

{
	{11,  0,  0,  0, 15},
	{ 0, 22,  0, 24,  0},
	{ 0,  0, 33,  0,  0},
	{ 0, 42,  0, 44,  0},
	{51,  0,  0,  0, 55},
}
3. Дан произвольный двухмерный массив:
{
	{11, 12, 13, 14, 15},
	{21, 22, 23, 24, 25},
	{31, 32, 33, 34, 35},
	{41, 42, 43, 44, 45},
	{51, 52, 53, 54, 55},
}
Напишите код, который получит массив значений заданного столбца:
{
	13, 23, 33, 43, 54
}.

Уровень 10.8
1. Напишите программу, которая будет проверять, можно ли получить из одной строки другую путем перестановки ее букв.
2. Реализуйте алгоритм Решето Эратосфена для поиска простых чисел в заданном промежутке.
3. Дан произвольный двухмерный массив:
{
	{11, 12, 13, 14, 15},
	{21, 22, 23, 24, 25},
	{31, 32, 33, 34, 35},
	{41, 42, 43, 44, 45},
	{51, 52, 53, 54, 55},
}
Переставьте местами два заданных ряда:
{
	{51, 52, 53, 54, 55},
	{21, 22, 23, 24, 25},
	{31, 32, 33, 34, 35},
	{41, 42, 43, 44, 45},
	{11, 12, 13, 14, 15},
}
4. Дан произвольный двухмерный массив:
{
	{1, 2, 3, 4, 5},
	{1, 2, 3, 4, 5},
	{1, 2, 3, 4, 5},
	{1, 2, 3, 4, 5},
	{1, 2, 3, 4, 5},
}
Получите сумму столбцов этого массива. Результат представьте в виде массива сумм:
{
	5, 10, 15, 20, 25
}.
5. Дана строка, содержащая в себе любое количество вложенных парных круглых скобок. Напишите код, который проверит, что скобки расположены корректно.
Так корректно: "()()". Так корректно: "(())".
Так некорректно, так как количество открытых скобок не совпадает с количеством закрытых: "())".
Так некорректно, так как, хотя количество открытых скобок и совпадает с количеством закрытых, но у них неправильный порядок: "))((".

Уровень 10.9
1. Дан файл с текстом. Найдите самый часто используемый символ этого текста и выведите его в абзац.
2. Напишите код, который будет генерировать пароль заданного размера. Пароль обязательно должен будет содержать маленькую и большую буквы, цифру и какой-то специальный символ.
3. Дана строка, содержащая в себе дробь: "12/16". Напишите код, который распишет процесс сокращения дроби, как в школе: "12/16 = 6/8 = ¾".
4. Дан произвольный двухмерный массив:
{
	{11, 12, 13, 14, 15},
	{21, 22, 23, 24, 25},
	{31, 32, 33, 34, 35},
	{41, 42, 43, 44, 45},
	{51, 52, 53, 54, 55},
}
Переставьте местами два заданных столбца:
{
	{11, 15, 13, 14, 12},
	{21, 25, 23, 24, 22},
	{31, 35, 33, 34, 32},
	{41, 45, 43, 44, 42},
	{51, 55, 53, 54, 52},
}.

Уровень 10.10
1. Дан массив. Выведите в консоль все варианты перестановки элементов этого массива.
2. Даны два числа. Выведите в консоль процесс умножения этих чисел в столбик, как в школе.
3. Дан произвольный двухмерный массив:
{
	{11, 32, 13, 44, 55},
	{31, 42, 53, 66, 75},
	{12, 26, 33, 45, 52},
	{15, 22, 35, 64, 57},
	{21, 52, 32, 44, 38},
}
Найдите максимальный и минимальный элементы и поменяйте их местами.
4. Дан произвольный двухмерный массив:
{
	{11, 12, 13, 14, 15},
	{21, 22, 23, 24, 25},
	{31, 32, 33, 34, 35},
	{41, 42, 43, 44, 45},
	{51, 52, 53, 54, 55},
}
Напишите код, который будет обнулять заданный столбец:
{
	{11, 12,  0, 14, 15},
	{21, 22,  0, 24, 25},
	{31, 32,  0, 34, 35},
	{41, 42,  0, 44, 45},
	{51, 52,  0, 54, 55},
}
5. Дан произвольный двухмерный массив:
{
	{11, 12, 13, 14, 15},
	{21, 22, 23, 24, 25},
	{31, 32, 33, 34, 35},
	{41, 42, 43, 44, 45},
	{51, 52, 53, 54, 55},
}
Выполните его транспонирование:
{
	{11, 21, 31, 41, 51},
	{12, 22, 32, 42, 52},
	{13, 23, 33, 43, 53},
	{14, 24, 34, 44, 54},
	{15, 25, 35, 45, 55},
}.

Источник: https://code.mu/ru/cpp/tasker/stager/

